#!/bin/bash

#
# Copyright (C) 2011 Gianni 'guelfoweb' Amato < guelfoweb@gmail.com >
#
# This program is released under the terms of the GNU General Public License
# (GPL), which is distributed with this software in the file "COPYING".
# The GPL specifies the terms under which users may copy and use this software.
#
# This is a GUI forensic tool for file information.
#
VERSION="FileInfo v.0.4"
# ↓

dependence(){
	TEST=`exiftool 2> /dev/null`
	if [ "$TEST" == "" ]; then
		sudo apt-get install -y libimage-exiftool-perl
	fi
}

instal(){
	dependence
	sudo cp $0 /usr/local/bin/fileinfo
	sudo chmod a+x /usr/local/bin/fileinfo
	
	echo "for uri in \$NAUTILUS_SCRIPT_SELECTED_URIS; do" > ~/.gnome2/nautilus-scripts/FileInfo
	echo "fileinfo \$uri &" >> ~/.gnome2/nautilus-scripts/FileInfo
	echo "done" >> ~/.gnome2/nautilus-scripts/FileInfo

	sudo chmod +x ~/.gnome2/nautilus-scripts/FileInfo
	echo "Ready! Now: Right-click on the file -> Script -> FileInfo"
	echo "bye ;)"
}

######################## GLOBAL VAR ########################

if [ $# == 0 ]; then
	zenity --error --text="No file found.\nInstall:  bash fileinfo --install\nUsage:  fileinfo filename.ext"
	exit;
fi

# Purge file name and Control option
FILE=`echo "$1" | sed 's/file:\/\///g' | sed 's/\%20/ /g'` #`zenity --file-selection`		# File Path

if [ "$FILE" == "" ]; then
	zenity --error --text="No file found."
	echo "bye ;)"
	exit;
elif [ "$FILE" == "--install" ]; then
	instal
	exit;
fi

TS=`date --utc --date now +%s`			# Timestamp
BASENAME=`basename "$FILE"`				# File Name
MD5="/tmp/.md5_$TS.txt"					# MD5 Hash
SHA1="/tmp/.sha1_$TS.txt"				# Sha1 Hash
MI="/tmp/.mi_$TS.txt"					# Meta Info
SI="/tmp/.si_$TS.txt"					# Strings Info
MI_REPORT="/tmp/.mi_report_$TS.txt"		# Report Meta Information
SI_REPORT="/tmp/.si_report_$TS.txt"		# Report String Information
PE32="/tmp/.pe32_$TS.txt"				# PE32 Information
PE32FULL="/tmp/.pe32full_$TS.txt"		# PE32 Full Information
PDF="/tmp/.pdf_$TS.txt"					# PDF Info
PDFOBJ="/tmp/.pdfobj_$TS.txt"			# PDF Objects
FI=`file "$FILE" | cut -d\: -f2`		# File info

delete_info(){
	if [ -f "$PE32" ]; then rm $PE32; fi
	if [ -f "$PE32FULL" ]; then rm $PE32FULL; fi
	if [ -f "$PDF" ]; then rm $PDF; fi
	if [ -f "$PDFOBJ" ]; then rm $PDFOBJ; fi
	if [ -f "$MD5" ]; then rm $MD5; fi
	if [ -f "$SHA1" ]; then rm $SHA1; fi
	if [ -f "$MI" ]; then rm $MI; fi
	if [ -f "$SI" ]; then rm $SI; fi
	if [ -f "$MI_REPORT" ]; then rm $MI_REPORT; fi
	if [ -f "$SI_REPORT" ]; then rm $SI_REPORT; fi
}

###########################################################


meta_report(){
	(
	echo "10"
	echo "20"
	echo "File Name                       : $BASENAME" > $MI_REPORT
	echo "50"
	echo "File Type                       :$FI" >> $MI_REPORT
	echo "# Checking Meta Data..."
	exiftool "$FILE" > $MI
	echo "80"
	ROW=`cat $MI | wc -l`	
	cat "$MI" | tail -n $(($ROW - 3)) | grep -v "File Type" | grep -v "MIME Type" >> $MI_REPORT
	echo "100"; echo "# Done"; sleep 1;
		) |
        zenity --progress \
          --title="Meta Information" \
          --text="Exif Data" \
          --percentage=0 --auto-close

        if [ "$?" = -1 ] ; then
                zenity --error \
                  --text="Canceled."
        fi
	cat $MI_REPORT | sed 's/:/\n/' | zenity --title="Metadata - $BASENAME" --list --column='Meta' --column='Description' --width 650 --height 500
}

strings_report(){
	(
	echo "10"
	echo "# Checking ASCII String..."
	strings "$FILE" > $SI
	echo "45"
	echo "# Checking Unicode String..."
	strings -el "$FILE" >> $SI
	echo "90"
	cat "$SI" > $SI_REPORT
	echo "100"; echo "# Done"; sleep 1;
		) |
        zenity --progress \
          --title="Meta Information" \
          --text="ASCII and Unicodes" \
          --percentage=0 --auto-close

        if [ "$?" = -1 ] ; then
                zenity --error \
                  --text="Canceled."
        fi
	cat $SI_REPORT | zenity --title "Strings - $BASENAME" --text-info --width 650 --height 500
}

pdf_info(){
	cat $PDF | zenity --title "PDF Malware - $BASENAME" --text-info --width 650 --height 500
}

pdf_object_check(){
	if [ -f "$PDFOBJ" ]; then 
		echo "Reading info..."	
	else
		strings "$FILE" > $SI
		strings -el "$FILE" >> $SI
		# http://blog.didierstevens.com/programs/pdf-tools/
		OBJ=`grep --count -i " obj" $SI`
		ENDOBJ=`grep --count -i "endobj" $SI`
		STREAM=`grep --count -i "^stream" $SI`
		ENDSTREAM=`grep --count -i "endstream" $SI`
		XREF=`grep --count -i "^xref" $SI`
		STARTXREF=`grep --count -i "startxref" $SI`
		TRAILER=`grep --count -i "trailer" $SI`
		PAGE=`grep --count -i "\/Page" $SI`
		ENCRYPT=`grep --count -i "\/Encrypt" $SI`
		OBJSTM=`grep --count -i "\/Objstm" $SI`
		JS=`grep --count -i "\/JS" $SI`
		JAVASCRIPT=`grep --count -i "\/Javascript" $SI`
		AA=`grep --count -i "\/AA" $SI`
		OPENACTION=`grep --count -i "\/OpenAction" $SI`
		JBIG2DECODE=`grep --count -i "\/JBIG2Decode" $SI`
		RICHMEDIA=`grep --count -i "\/RichMedia" $SI`
		LAUNCH=`grep --count -i "\/Launch" $SI`
	fi
}

pdf_object_show(){
	echo "obj:$OBJ" > $PDFOBJ
	echo "endobj:$ENDOBJ" >> $PDFOBJ
	echo "stream:$STREAM" >> $PDFOBJ
	echo "endstream:$ENDSTREAM" >> $PDFOBJ
	echo "xref:$XREF" >> $PDFOBJ
	echo "startxref:$STARTXREF" >> $PDFOBJ
	echo "trailer:$TRAILER" >> $PDFOBJ
	echo "/Page:$PAGE" >> $PDFOBJ
	echo "/Encrypt:$ENCRYPT" >> $PDFOBJ
	echo "/Objstm:$OBJSTM" >> $PDFOBJ
	echo "/JS:$JS" >> $PDFOBJ
	echo "/Javascript:$JAVASCRIPT" >> $PDFOBJ
	echo "/AA:$AA" >> $PDFOBJ
	echo "/OpenAction:$OPENACTION" >> $PDFOBJ
	echo "/JBIG2Decode:$JBIG2DECODE" >> $PDFOBJ
	echo "/RichMedia:$RICHMEDIA" >> $PDFOBJ
	echo "/Launch:$LAUNCH" >> $PDFOBJ

	cat $PDFOBJ | sed 's/:/\n/' | zenity --title="PDF Object - $BASENAME" --list --column='Object' --column='Count' --width 100 --height 600
}

malicoius_pdf_check(){
	if [ -f "$PDFOBJ" ]; then 
		echo "Ready!"
	else
		pdf_object_check
	fi
	clear
	ENCODE=`egrep -i -n "/ASCIIHexDecode|/ASCII85Decode|/JBIG2Decode|/Crypt" "$FILE"`
	if ([ "$JS" != "0" ] || [ "$JAVASCRIPT" != "0" ]) &&  ([ "$AA" != "0" ] || [ "$OPENACTION" != "0" ]) || ([ "$ENCODE" != "" ]); then
		egrep -i -n "/ASCIIHexDecode|/ASCII85Decode|/LZWDecode|/FlateDecode|/RunLengthDecode|/CCITTFaxDecode|/JBIG2Decode|/DCTDecode|/JPXDecode|/Crypt" "$FILE" > $PDF
		echo "" >> $PDF
		sed -n '/obj/,/endobj/p' "$FILE" | sed -n '/stream/,/endstream/p' | sed 's/^stream//g' | sed 's/endstream//g' >> $PDF
		echo "" >> $PDF
		egrep -i -n "script>|eval|payload|http:\/\/\.*|www\..*\." "$FILE" >> $PDF
		# sed -n '/<</,/>>/p' "$FILE" | sed 's/^/\t/' >> $PDF # Attribute of the object
		menu_pdf_malware
	else
		menu_pdf
	fi
}

pe32_info(){
	(
	echo "10"
	echo "# Object Checking..."
	objdump -x "$FILE" > $PE32FULL
	strings "$FILE" > $SI
	strings -el "$FILE" >> $SI
	echo "60"
	echo "# Info Matching..."
	echo "[ Main Info ]" > $PE32
	echo "" >> $PE32
	cat $PE32FULL | grep "DLL Name:\|start address\|Time\/Date" >> $PE32
	echo "" >> $PE32
	echo "- Possible remote connections:" >> $PE32
	echo "" >> $PE32
	cat $SI | grep -i ".*inet\|regedit\|hkey\|hklm\|hkcr\|hkcu\|hkcc\|hkdd\|urlmon\|socket\|http:\/\/.*\|www\..*\." | sed 's/^/\t/' >> $PE32
	echo "" >> $PE32
	echo "[ End Main Info ]" >> $PE32
	echo "" >> $PE32
	echo "[ Full Info ]" >> $PE32
	echo "" >> $PE32
	tail -n +4 $PE32FULL  >> $PE32
	echo "" >> $PE32
	echo "[ End Full Info ]" >> $PE32
	echo "100"; echo "# Done"; sleep 1;
		) |
        zenity --progress \
          --title="PE32 Info" \
          --text="Call Object" \
          --percentage=0 \
		  --auto-close

        if [ "$?" = -1 ] ; then
                zenity --error \
                  --text="Canceled."
        fi
	cat "$PE32" | tr '\t' ' ' | zenity --title "PE32 Info - $BASENAME" --text-info --width 650 --height 500
}

hash_md5(){
	(
	echo "10"
	echo "# Calculating Hash MD5..."
	md5sum "$FILE" | cut -d" " -f1 > $MD5
	echo "100"; echo "# Done"; sleep 1;
		) |
        zenity --progress \
          --title="Hash Value" \
          --text="MD5" \
          --percentage=0 \
		  --auto-close

        if [ "$?" = -1 ] ; then
                zenity --error \
                  --text="Canceled."
        fi
	cat "$MD5" | zenity --title "MD5 - $BASENAME" --text-info --width 300 --height 50
}

hash_sha1(){
	(
	echo "10"
	echo "# Calculating Hash SHA1..." ; sleep 1
	sha1sum "$FILE" | cut -d" " -f1 > $SHA1
	echo "100"; echo "# Done"; sleep 1;
		) |
        zenity --progress \
          --title="Hash Value" \
          --text="MD5" \
          --percentage=0 \
		  --auto-close

        if [ "$?" = -1 ] ; then
                zenity --error \
                  --text="Canceled."
        fi
	cat "$SHA1" | zenity --title "SHA1 - $BASENAME" --text-info --width 300 --height 50
}


about(){
	zenity --info --text="$VERSION - a forensics GUI for file information.\nby Gianni 'guelfoweb' Amato."
}

menu_classic(){
	response=$(zenity --list --title="File Info - $BASENAME" --radiolist  --column "↓" --column "Action" --column "Description" TRUE "Meta Information" "Exif Data" FALSE "String Information" "ASCII and Unicodes" FALSE "Hash MD5" "MD5 Value" FALSE "Hash SHA1" "SHA1 Value" FALSE "About" "File Info" --width 350 --height 300)
}

menu_pe32(){
	response=$(zenity --list --title="File Info - $BASENAME" --radiolist  --column "↓" --column "Action" --column "Description" TRUE "Meta Information" "Exif Data" FALSE "String Information" "ASCII and Unicodes" FALSE "PE32 Information" "Call Object" FALSE "Hash MD5" "MD5 Value" FALSE "Hash SHA1" "SHA1 Value" FALSE "About" "File Info" --width 350 --height 300)
}

menu_pdf_malware(){
	response=$(zenity --list --title="File Info - $BASENAME" --radiolist  --column "↓" --column "Action" --column "Description" TRUE "Meta Information" "Exif Data" FALSE "String Information" "ASCII and Unicodes" FALSE "PDF Object" "Objects Count" FALSE "PDF Malicious" "Show Malicious Object" FALSE "Hash MD5" "MD5 Value" FALSE "Hash SHA1" "SHA1 Value" FALSE "About" "File Info" --width 350 --height 300)
}

menu_pdf(){
	response=$(zenity --list --title="File Info - $BASENAME" --radiolist  --column "↓" --column "Action" --column "Description" TRUE "Meta Information" "Exif Data" FALSE "String Information" "ASCII and Unicodes" FALSE "PDF Object" "Object Count" FALSE "Hash MD5" "MD5 Value" FALSE "Hash SHA1" "SHA1 Value" FALSE "About" "File Info" --width 350 --height 300)
}

menu_thumbcheck(){
	THUMBCHECK=`exiftool "$FILE" | grep "Thumbnail Image"`
	if [ -z "$THUMBCHECK" ]; then # se non lo trova
		menu_classic
	else
		response=$(zenity --list --title="File Info - $BASENAME" --radiolist  --column "↓" --column "Action" --column "Description" TRUE "Meta Information" "Exif Data" FALSE "String Information" "ASCII and Unicodes" FALSE "Show Thumbnail" "Extract Thumbnail" FALSE "Hash MD5" "MD5 Value" FALSE "Hash SHA1" "SHA1 Value" FALSE "About" "File Info" --width 350 --height 300)
	fi
}

save_thumbnail(){
	SavePath=$(zenity --file-selection --title="Select file path to extract thumbnail" --save --confirm-overwrite)
	if [ -z "$SavePath" ] ; then 
		main_info; 
	else
		exiftool -b -ThumbnailImage "$FILE" > $SavePath-$TS.jpg
	fi
}

menu_error(){
	zenity --error --text "Select a file please!"
}

main_info(){
	clear
	TYPE=`echo "$FI" | cut -d" " -f2`
	case $TYPE in
		"PE32") menu_pe32;;
		"PE32+") menu_pe32;;
		"JPEG") menu_thumbcheck;;
		"PDF") malicoius_pdf_check;;
		"directory") menu_error; exit;;
		*) menu_classic;;
	esac

	if [ -z "$response" ] ; then
		 echo "bye :-)"
		 delete_info
		 exit 1
	fi

	case $response in
		"Meta Information") meta_report; main_info; exit 1;;
		"String Information") strings_report; main_info; exit 1;;
		"PE32 Information") pe32_info; main_info; exit 1;;
		"PDF Malicious") pdf_info; main_info; exit 1;;
		"PDF Object") pdf_object_show; main_info; exit 1;;
		"Show Thumbnail") save_thumbnail; main_info; exit 1;;
		"Hash MD5") hash_md5; main_info; exit 1;;
		"Hash SHA1") hash_sha1; main_info; exit 1;;
		"About") about; main_info; exit 0;;
	esac
}

delete_info
main_info
