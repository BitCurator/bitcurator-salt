#!/bin/bash
#: Title    : mounter
#: Author   : "John Lehr" <slo.sleuth@gmail.com>
#: Date     : 09/28/2012
#: Version  : 0.2.2
#: Desc     : mount device(s) selected by user
#: Options  : none

#: 09/14/11 : v0.1.0 Initial release
#: 09/26/11 : v0.1.1 added partition size, rbfstab status, mount point
#:          : location and write status
#: 10/31/11 : v0.1.2 Bug fix to allow mounting of devices with rbfstab
#:          : disabled
#: 09/24/12 : v0.2.0 Added right-click system mount policy change option
#: 09/25/12 : v0.2.1 Bug fix to stop loop on shutdown
#: 09/28/12 : v0.2.2 Bug fix in dependency checking, allow only on process

## Fixed variables
WINDOW_SPECS="--window-icon=gtk-harddisk --title=\"Mounter\""
HDRO=/usr/share/pixmaps/mounter/harddisk-readonly.png
HDRW=/usr/share/pixmaps/mounter/harddisk-writeable.png
PIPE=$(mktemp -u --tmpdir ${0##*/}.XXXXXXXX)
export WINDOW_SPECS HDRO HDRW PIPE

## Functions
function check_dependencies()
{
    which yad >/dev/null || (echo "Error: yad not installed"; return 1; continue)

    deps="blkid sfdisk rbfstab"
    for dep in $deps
    do
        sudo which $dep >/dev/null

        if [ $? -gt 0 ]
        then
            ERR="<b>Error: missing dependency or dependencies</b>\n
            Check that \"$dep\" is installed."
            yad \
                $WINDOW_SPECS \
                --window-icon=gtk-harddisk \
                --image=gtk-dialog-error \
                --text="$ERR"
        return 1
        fi
    done
}

check_error()
{
    if [ $? -gt 0 ]
    then
        get_mount_policy
        yad \
            $WINDOW_SPECS \
            --image=gtk-dialog-error \
            --text="There was an error.\n"
        flash_status
        exit 1
    fi
}

function on_exit()
{
    # handler to manage process shutdown
    echo "quit" >&3
    rm -f $PIPE 
}


function update_state()
{
    # change tray icon based on system state
    exec 3<>$PIPE
    if [ -e /etc/udev/rules.d/fstab.rules ]
    then
        echo "icon:$HDRO" >&3
        echo "tooltip:SAFE - Devices mount READ-ONLY\n(right-click to change)" >&3
        echo "menu:Make WRITEABLE!bash -c make_writeable!$HDRW" >&3
    else
        echo "icon:$HDRW" >&3
        echo "tooltip:WARNING - Devices mount WRITEABLE\n(right-click to change)" >&3
        echo "menu:Make READ-ONLY!bash -c make_readonly!$HDRO" >&3
    fi
}

function flash_status()
{
    get_mount_policy
    update_state
    yad \
        --image="$IMAGE" \
        --image-on-top \
        --undecorated \
        --text="<span size='x-large'>System mount policy:</span> $STATUS" \
        --no-buttons \
        --timeout=3
}

function get_mount_policy()
{
    if [ -e /etc/udev/rules.d/fstab.rules ]
    then
        STATUS="<span size='x-large' foreground='dark green'><b><u>READ-ONLY</u></b></span>"
        IMAGE=$HDRO
    else 
        STATUS="<span size='x-large' foreground='red'><b><u>WRITEABLE</u></b></span>"
        IMAGE=$HDRW
    fi
}

function make_readonly()
{
    sudo rbfstab -i
    check_error
    flash_status &
}

function make_writeable()
{
    instructions="<span size= 'x-large' foreground='red'><b><u>WARNING</u></b></span>\n
Newly mounted devices will be <span color='red'><b>WRITEABLE</b></span>.
<i>(Currently mounted devices will be unchanged)</i>\n
Are you sure you want to continue?"
    
    yad \
        $WINDOW_SPECS \
        --image=$HDRW \
        --text="$instructions" \
        --button=gtk-yes:0 \
        --button=gtk-cancel:1

    case $? in
        0) rbfstab -r
            check_error
            flash_status;;
        1) flash_status;;
    esac
}

function mount_disks() 
{
    # detect/mount attached devices
    dev_list=
    selection=
    count=0

    # read the current system policy
    get_mount_policy

    POLICY="<span size='x-large'>Selected devices will be mounted</span> $STATUS."

    instructions="Detected <b>BLOCK DEVICES</b> and their current \
mount status. Selected devices are toggled mount/unmount.\n\n\
$POLICY\n\nMake a selection:"

    # Gather information about attached block devices
    devices=$(sudo blkid -o device | grep -v ram)

    # Parse information for list dialog
    for device in $devices
    do
        count=$(($count+1))

        # Determine file system type
        fs_type=$(blkid -s TYPE -o value $device)

        # Ignore swap
        [ "$fs_type" = "swap" ] && continue

        # Determine volume label
        vol_label=$(blkid -s LABEL -o value $device)
        [ -z "$vol_label" ] && vol_label="(none)"

        # Determine volume size
        vol_size=$(($(sudo sfdisk -s $device)/1024))
        vol_size=$(printf "%'d\n" $vol_size)

        # Determine if currently mounted
        mounted=($(grep ^$device /etc/mtab))
        if [ -z $mounted ] 
        then 
            mounted="(none)"
            status="(none)"
        else
            mounted="${mounted[1]}"
            case ${mounted[3]} in
                ro*) status="READ-ONLY" ;;
                rw*) status="Writeable" ;;
            esac
        fi

        # Create a device list
        dev_list="$dev_list $count $device ${fs_type// /_} \
${vol_label// /_} $vol_size $mounted $status"
    done

    selection=$(
        yad --list $WINDOW_SPECS \
            --image=$IMAGE \
            --text="$instructions" \
            --column= \
            --column=Device \
            --column="FS Type" \
            --column=Label \
            --column="Size (MB)" \
            --column="Mount Point" \
            --column=Status \
            --checklist \
            --height=300 \
            --width=600 \
            --print-column=2 \
            --button=gtk-refresh:2 \
            --button=gtk-cancel:1 \
            --button=gtk-ok:0 \
            $dev_list)
    
    # read exit code from button push
    case $? in 
        0) local run=0;; # Continue
        1) exit 0;; # Exit on "cancel"
        2) local run=1; mount_disks ;; # Restart on refresh
    esac

    # Exit if no user selection on "ok"
    if [ -z "$selection" ]
    then
        yad $WINDOW_SPECS \
            --image=gtk-dialog-error \
            --text="Error: No devices selected." \
            --width=200 \
            --button=gtk-ok
        exit 1
    fi

    # mount/umount user selected devices
    if [ $run = 0 ]
    then
        for device in $selection
        do
            device=${device//|/}
            grep -q ^$device /etc/mtab
            if [ $? = 0 ]
            then 
                sudo umount $device 
                [ $? = 1 ] && yad $WINDOW_SPECS \
                    --image=gtk-dialog-error \
                    --text="Error: device is busy.  Ensure no \
applications \nor windows are accessing device and try again."
            elif [ -e /etc/udev/rules.d/fstab.rules ]
            then
                sudo mount $device
                
            else
                sudo mount $device /media/${device#/dev/}
            fi
            check_mount
        done
    fi
}

function check_mount()
{
    success=$(mount | grep $device)
    if [ $? -ne 0 ]
    then
        message="\n<span size='x-large'>$device not mounted</span>"
    else
        message="<span size='x-large'>$device mounted</span> $STATUS
<i>$success</i>"
    fi
    
    yad --undecorated \
        --no-buttons \
        --image=$IMAGE \
        --text="$message" \
        --timeout=3
}

## Main Script

## Exit if script is already running
if [ -e /var/run/mounter.pid ]
then
    ps "$(</var/run/mounter.pid)" >/dev/null 2>&1 && exit 0
    rm -f /var/run/mounter.pid
fi
echo "$$" > /var/run/mounter.pid

# create FIFO to send/receive yad commands
mkfifo $PIPE

# attach a file descriptor to the FIFO file
exec 3<> $PIPE

# terminate if dependencies are missing
check_dependencies
[ $? = 1 ] && exit 1
[ $UID = 0 ] || ( echo "Error: must be run as root"; exit 1 )

# Exit cleanly by removing named pipe
trap on_exit EXIT

# Make functions and pipe accessible other functions
export -f check_error update_state flash_status get_mount_policy
export -f mount_disks make_readonly make_writeable check_mount

# Determine system disk-write policy
update_state

# create the notification icon
yad --notification \
    --image=gtk-harddisk \
    --listen \
    --text="Mounter" \
    --command="bash -c mount_disks" <&3
